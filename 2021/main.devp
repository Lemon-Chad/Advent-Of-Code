#func main;

import iofile as io;
const { * } => import std;

class AOCLogger {
    indentation: num => 0;

    mthd log<msg> {
        if (indentation == 0) {
            println(msg);
        } else {
            for (_ -> 0:indentation) {
                print("  ");
            }
            println("- " + msg);
        }
    }

    mthd indent {
        indentation++;
    }

    mthd outdent {
        indentation--;
        println("");
    }
}
const Logger => AOCLogger();

class Helper {

    mthd stc sumsLessThan<lis #list> = num {
        let sum => 0;
        for (i -> 0 : --(lis.size())) {
            if (lis[i] < lis[++i])
                sum++;
        }
        return sum;
    }

    mthd stc slidingThrees<lis #list> = list -> for (i -> 0 : (lis.size()) - 2) => lis[i] + lis[i + 1] + lis[i + 2];

    mthd stc bitCount<lis #list, index #num> = ([num][num]) {
        let ones => 0;
        let zeros => 0;

        for (x <- lis)
            if (x[index] == '1')
                ones++;
            else
                zeros++;

        return Tuple(ones, zeros);
    }

    mthd stc bitCriteria<lis #list, criteria #function> = String {
        for (i -> 0:lis[0].size()) {
            if ((lis.size()) == 1) break;
            let tup => Helper::bitCount(lis, i);
            
            let newLis => [];
            for (x <- lis) {
                if (criteria(x[i], *tup[0] >= *tup[1]))
                    newLis.append(x);
            }
            lis => newLis;
        }
        return lis[0];
    }

    mthd stc binaryToDecimal<str #String> = num {
        let sum => 0;

        let o => 0;
        for (i -> 0 : str.size()) {
            let char => str[-i - 1];

            if (char != '0' & char != '1') {
                o++;
                continue;
            }

            sum += (char == '1') * (2 ^ (i - o));
        }

        return sum;
    }

    mthd stc parseCoordinate<str #String> = ([num][num]) {
        let pair => str.split(",");
        Tuple(parseNum(pair[0]), parseNum(pair[1]))
    }

    mthd stc rightmost<points #list> = num {
        let max => 0;
        for (p <- points) {
            if (*p[0] > max)
                max => *p[0];
        }
        max
    }

    mthd stc downmost<points #list> = num {
        let max => 0;
        for (p <- points) {
            if (*p[1] > max)
                max => *p[1];
        }
        max
    }

    mthd stc leftPoint<a, b> = ([num][num]) ->
        ? (*a[0] < *b[0]):
            *a
        $_:
            *b;

    mthd stc rightPoint<a, b> = ([num][num]) ->
        ? (*a[0] > *b[0]):
            *a
        $_:
            *b;

    mthd stc upPoint<a, b> = ([num][num]) ->
        ? (*a[1] < *b[1]):
            *a
        $_:
            *b;

    mthd stc downPoint<a, b> = ([num][num]) ->
        ? (*a[1] > *b[1]):
            *a
        $_:
            *b;

}

<> Advent of Code 2021 - Day 1
class DayOne {
    stc numbers: list => for (x <- io::readFile("inputs/1.txt").split("\n")) => parseNum(x);


    mthd stc partOne = num {
        return Helper::sumsLessThan(DayOne::numbers);
    }

    mthd stc partTwo = num {
        return Helper::sumsLessThan(Helper::slidingThrees(DayOne::numbers));
    }

    mthd stc main {
        Logger::log("Day One:");
        Logger::indent();
        Logger::log("Part One: " + DayOne::partOne());
        Logger::log("Part Two: " + DayOne::partTwo());
        Logger::outdent();
    }
}

<> Advent of Code 2021 - Day 2
class DayTwo {
    stc movements: list => 
        for (x <- io::readFile("inputs/2.txt").split("\n")) => 
            Tuple(
                (var y => x.split(" "))[0], 
                parseNum(y[1])
            );

    mthd stc partOne = num {
        let x => 0;
        let depth => 0;
        
        for (movement <- DayTwo::movements) {
            let offs => *movement[1];
            let dir => *movement[0];

            match (dir) {
                "forward" -> x += offs;
                "down" -> depth += offs;
                "up" -> depth -= offs;
                default -> throw "Invalid direction";
            };
        }

        return x * depth;
    }

    mthd stc partTwo {
        let x => 0;
        let depth => 0;
        let aim => 0;

        for (movement <- DayTwo::movements) {
            let offs => *movement[1];
            let dir => *movement[0];

            match (dir) {
                "forward" -> scope {
                    x += offs;
                    depth += offs * aim;
                }
                "down" -> aim += offs;
                "up" -> aim -= offs;
            };
        }

        return x * depth;
    }

    mthd stc main {
        Logger::log("Day Two:");
        Logger::indent();
        Logger::log("Part One: " + DayTwo::partOne());
        Logger::log("Part Two: " + DayTwo::partTwo());
        Logger::outdent();
    }

}

class DayThree {
    stc input: list => io::readFile("inputs/3.txt").split("\n");

    mthd stc partOne = num {
        let gammaStr => "";
        let epsilonStr => "";

        let inpSize => --(DayThree::input[0].size());
        for (i -> 0:inpSize) {
            let tup => Helper::bitCount(DayThree::input, i);
            let ones => *tup[0];
            let zeros => *tup[1];
            
            gammaStr += ? (ones > zeros): '1' 
                        $_: '0';
            epsilonStr += ? (ones < zeros): '1' 
                        $_: '0';
        }

        let gamma => Helper::binaryToDecimal(gammaStr);
        let epsilon => Helper::binaryToDecimal(epsilonStr);

        return gamma * epsilon;
    }

    mthd stc partTwo = num {
        let oxygen => Helper::bitCriteria(DayThree::input, !<x, isOne> -> (x == '1') == ( isOne));
        let carbon => Helper::bitCriteria(DayThree::input, !<x, isOne> -> (x == '1') == (!isOne));

        return Helper::binaryToDecimal(carbon) * Helper::binaryToDecimal(oxygen);
    }

    mthd stc main {
        Logger::log("Day Three:");
        Logger::indent();
        Logger::log("Part One: " + DayThree::partOne());
        Logger::log("Part Two: " + DayThree::partTwo());
        Logger::outdent();
    }
}

obj Board {
    prv board: list;
    prv marked: list;
    prv lastNum: num;

    ingredients<board #list> {
        attr board => board;
        attr marked => for (_ -> 0:25) => &false;
        attr lastNum => 0;
    }

    mthd mark<number #num> = void {
        let index => board.indexOf(number);
        if (index == -1) {
            return null;
        }
        marked[index] => true;
        lastNum => number;
    }

    mthd hasWon = bool {
        for (i -> 0:5)
            if (marked[i] & marked[i + 5] & marked[i + 10] & marked[i + 15] & marked[i + 20])
                return true;
            elif (marked[i * 5] & marked[i * 5 + 1] & marked[i * 5 + 2] & marked[i * 5 + 3] & marked[i * 5 + 4])
                return true;
        false
    }

    mthd score = num {
        let unmarkedSum => 0;
        for (i -> 0:25)
            if (!marked[i])
                unmarkedSum += board[i];
        return unmarkedSum * lastNum;
    }

    mthd getBoard = list {
        return board;
    }

    mthd getMarked = list {
        return marked;
    }

    mthd getLastNum = num {
        return lastNum;
    }
    
    mthd bin eq<other> -> board == other::getBoard() & marked == other::getMarked() & lastNum == other::getLastNum();

}

class DayFour {
    stc numbers: list => for (x <- (io::readFile("inputs/4.txt").split("\n"))[0].split(",")) => parseNum(x);
    stc boards: list => scope {
        let lines => io::readFile("inputs/4.txt").split("\n");
        lines => lines.sublist(1, lines.size());
        let boards => [];
        for (i -> 0:(lines.size()) / 6) {
            let board => [];
            for (j -> 1:6) {
                let line => lines[i * 6 + j];
                for (k <- line.split(" ")) {
                    if ((k.size()) == 0) continue;
                    board.append(parseNum(k));
                }
            }
            boards.append(Board(board));
        }
        boards
    }

    mthd stc partOne = num {
        for (number <- DayFour::numbers) {
            for (board <- DayFour::boards) {
                board::mark(number);
                if (board::hasWon()) return board::score();
            }
        }
        0
    }

    mthd stc partTwo = num {
        let boards => DayFour::boards;
        for (number <- DayFour::numbers) {
            for (board <- boards) {
                board::mark(number);
                if (board::hasWon()) {
                    if ((boards.size()) == 1) return board::score();
                    boards /= board;
                }
            }
        }
        0
    }

    mthd stc main {
        Logger::log("Day Four:");
        Logger::indent();
        Logger::log("Part One: " + DayFour::partOne());
        Logger::log("Part Two: " + DayFour::partTwo());
        Logger::outdent();
    }

}

class DayFive {
    stc lines: list => for (x <- io::readFile("inputs/5.txt").split("\n")) => scope {
        let pair => x.split(" -> ");
        let left => Helper::parseCoordinate(pair[0]);
        let right => Helper::parseCoordinate(pair[1]);
        Tuple(left, right)
    }

    mthd stc flattenedList = list {
        let lis => [];
        for (tup <- DayFive::lines) {
            lis.append(tup[0]);
            lis.append(tup[1]);
        }
        lis
    }

    mthd stc partOne = num {
        let flattenedList => DayFive::flattenedList();
        let y => 1000;
        let x => 1000;

        let map => for (i -> 0:x) => for (j -> 0:y) => &0;

        for (line <- DayFive::lines) {
            let x1 => *line[0][0];
            let y1 => *line[0][1];
            let x2 => *line[1][0];
            let y2 => *line[1][1];

            if (x1 == x2) {
                let left => ?(y1 < y2): y1 
                            $_: y2;
                let right => ?(y1 < y2): y2 
                            $_: y1;

                for (i -> left:++right) {
                    map[i][x1]++;
                }
            } elif (y1 == y2) {
                let top => ?(x1 < x2): x1 
                            $_: x2;
                let bottom => ?(x1 < x2): x2
                            $_: x1;

                for (i -> top:++bottom) {
                    map[y1][i]++;
                }
            }
        }

        

        let count => 0;
        for (j -> 0:y) {
            for (i -> 0:x) {
                if (*map[i][j] > 1) count += 1;
            }
        }
        count
    }

    mthd stc partTwo = num {
        let flattenedList => DayFive::flattenedList();
        let y => 1000;
        let x => 1000;

        let map => for (i -> 0:x) => for (j -> 0:y) => &0;

        for (line <- DayFive::lines) {
            let x1 => *line[0][0];
            let y1 => *line[0][1];
            let x2 => *line[1][0];
            let y2 => *line[1][1];

            if (x1 == x2) {
                let left => ?(y1 < y2): y1 
                            $_: y2;
                let right => ?(y1 < y2): y2 
                            $_: y1;

                for (i -> left:++right) {
                    map[i][x1]++;
                }
            } elif (y1 == y2) {
                let top => ?(x1 < x2): x1 
                            $_: x2;
                let bottom => ?(x1 < x2): x2
                            $_: x1;

                for (i -> top:++bottom) {
                    map[y1][i]++;
                }
            } else {
                <> All diagonals are 45 degrees
                let xdirection => ?(x1 < x2): 1 
                                $_: -1;
                let ydirection => ?(y1 < y2): 1
                                $_: -1;
                
                for (i -> 0:++abs(y1 - y2)) {
                    map[y1 + ydirection * i][x1 + xdirection * i]++;
                }
            }
        }

        <<
        for (row <- map) {
            for (i <- row) {
                if (*i == 0) print(".");
                else print(i);
            }
            print("\n");
        }
        <<

        let count => 0;
        for (j -> 0:y) {
            for (i -> 0:x) {
                if (*map[i][j] > 1) count += 1;
            }
        }
        count
    }

    mthd stc main {
        Logger::log("Day Five:");
        Logger::indent();
        Logger::log("Part One: " + DayFive::partOne());
        Logger::log("Part Two: " + DayFive::partTwo());
        Logger::outdent();
    }
}

fn main<args #list> {
    DayOne::main();
    DayTwo::main();
    DayThree::main();
    DayFour::main();
    DayFive::main();
}
